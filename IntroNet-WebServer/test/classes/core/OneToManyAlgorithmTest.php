<?php

//define('__ROOT__', dirname(dirname(__FILE__))); 
//require_once __ROOT__.'/Participant.php';
//require_once __ROOT__.'/Poster.php';
//require_once __ROOT__.'/core/OneToManyAlgorithm.php';
/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-04-05 at 20:00:41.
 */
class OneToManyAlgorithmTest extends PHPUnit_Framework_TestCase {

    /**
     * @var OneToManyAlgorithm
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new OneToManyAlgorithm;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers OneToManyAlgorithm::build
     * @todo   Implement testBuild().
     */
    public function testBuild() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers OneToManyAlgorithm::buildSchedules
     * @todo   Implement testBuildSchedules().
     */
    public function testBuildSchedules() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers OneToManyAlgorithm::testSortPosters
     * @todo   Implement testTestSortPosters().
     */
    public function testTestSortPosters() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers OneToManyAlgorithm::build
     * @todo   Implement testTestSortPosters().
     */
    public function testCase1() {
        $numberOfPosters = 10;
        $numberOfParticipants = 30;
        $rounds = 3;

        echo "numberOfPosters $numberOfPosters <br/>";
        echo "numberOfParticipants $numberOfParticipants <br/>";
        echo "rounds $rounds <br/>";

        $max = ceil($numberOfParticipants / $numberOfPosters);
        $min = 1;
        $posters = [];
        for ($i = 1; $i <= $numberOfPosters; $i++)
            $posters[$i] = new Poster($i, $rounds, $max, $min);

        $participants = [];
        for ($i = 1; $i <= $numberOfParticipants; $i++)
            $participants[$i] = new Participant($i, [2, 1, 3, 5]);


        $schedules = OneToManyAlgorithm::build($posters, $participants, $rounds);


        echo '<hr/><h3>List of participants</h3>';
        foreach ($participants as $participant_id => $participant) {
            $i = 0;
            foreach ($posters as $poster_id => $poster) {
                if ($poster->hasParticipant($participant) && $participant->hasPreference($poster->getId())) {
                    $i++;
                }
            }
            echo "<br/>p= $participant_id v= $i";
        }

        $this->assertCount($numberOfPosters, $schedules);
    }

    /**
     *  Having more rounds than posters
     * 
     */
    public function testCase2() {
        $numberOfPosters = 10;
        $numberOfParticipants = 30;
        $rounds = 12;

        $max = ceil($numberOfParticipants / $numberOfPosters);
        $min = 1;
        $posters = [];
        for ($i = 1; $i <= $numberOfPosters; $i++)
            $posters[$i] = new Poster($i, $rounds, $max, $min);

        $participants = [];
        for ($i = 1; $i <= $numberOfParticipants; $i++)
            $participants[$i] = new Participant($i, [2, 1, 3, 5]);


        try {
            $schedules = OneToManyAlgorithm::build($posters, $participants, $rounds);
            $this->fail("Expected Exception has not been raised.");
        } catch (Exception $ex) {

            //$this->expectException("Can not have rounds more than the number of posters");
            $this->assertEquals($ex->getMessage(), "Can not have rounds more than the number of posters");
        }
    }
    
     /**
     *  Having more rounds than posters
     *   @dataProvider dataSet
     */
    public function testCases($numberOfPosters,$numberOfParticipants,$rounds) {
//        $numberOfPosters = 10;
//        $numberOfParticipants = 30;
//        $rounds = 12;

        $max = ceil($numberOfParticipants / $numberOfPosters);
        $min = 1;
        $posters = [];
        for ($i = 1; $i <= $numberOfPosters; $i++)
            $posters[$i] = new Poster($i, $rounds, $max, $min);

        $participants = [];
        for ($i = 1; $i <= $numberOfParticipants; $i++)
            $participants[$i] = new Participant($i, [2, 1, 3, 5]);


        try {
            $schedules = OneToManyAlgorithm::build($posters, $participants, $rounds);
            //$this->asser
            $this->fail("Expected Exception has not been raised.");
        } catch (Exception $ex) {

            //$this->expectException("Can not have rounds more than the number of posters");
            $this->assertEquals($ex->getMessage(), "Can not have rounds more than the number of posters");
        }
    }
    
    function dataSet(){
        return [
        'Test Case 1'=>    [5,5,1],
        'Test Case 2'=>    [5,5,2],
        'Test Case 3'=>    [5,5,6]
        ];
    }

}
